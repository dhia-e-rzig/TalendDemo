// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.helloworldserviceconsumer_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: HelloWorldServiceConsumer Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class HelloWorldServiceConsumer implements TalendJob, TalendESBJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	private ESBEndpointRegistry registry = null;

	public void setEndpointRegistry(ESBEndpointRegistry registry) {
		this.registry = registry;
	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {

	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "HelloWorldServiceConsumer";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					HelloWorldServiceConsumer.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(HelloWorldServiceConsumer.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFixedFlowInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tESBConsumer_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	@SuppressWarnings("serial")
	public static class GenericFaultInfoException extends org.apache.cxf.frontend.FaultInfoException {

		private org.dom4j.Document faultInfo;

		public GenericFaultInfoException(String arg0, javax.xml.transform.Source source) {
			super(arg0);
			try {
				faultInfo = GenericConsumer.sourceToDocument(source);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public org.dom4j.Document getFaultInfo() {
			return faultInfo;
		}
	}

	static interface GenericServiceClass {
		Object invoke(Object param) throws GenericFaultInfoException;
	}

	static class GenericConsumer {

		private static final javax.xml.transform.TransformerFactory FACTORY = javax.xml.transform.TransformerFactory
				.newInstance();

		private javax.xml.namespace.QName serviceQName;
		private javax.xml.namespace.QName portQName;
		private javax.xml.namespace.QName operationQName;
		private boolean isRequestResponse;
		private String soapAction;
		private String address;
		private String wsdlURL;

		private java.util.Collection<org.apache.cxf.feature.Feature> esbFeatures;
		private org.apache.cxf.Bus bus;

		private String authType;
		private String username;
		private String password;

		private String proxyServer;
		private int proxyPort;
		private String proxyUsername;
		private String proxyPassword;

		private long connectionTimeout;
		private long receiveTimeout;

		private boolean autoRedirect;
		private boolean disableChunking;
		private boolean redirectSameHostOnly;

		private boolean logMessages;

		private java.util.Collection<org.apache.cxf.headers.Header> soapHeaders;

		private Object correlationIDCallbackHandler;

		private java.util.Map<String, String> samCustomProperties;

		private String correlationID;

		private java.util.Map<String, List<?>> httpResponseHeaders;
		private java.lang.Integer httpResponseCode;

		public void setServiceQName(javax.xml.namespace.QName serviceQName) {
			this.serviceQName = serviceQName;
		}

		public void setPortQName(javax.xml.namespace.QName portQName) {
			this.portQName = portQName;
		}

		public void setOperationQName(javax.xml.namespace.QName operationQName) {
			this.operationQName = operationQName;
		}

		public void setIsRequestResponse(boolean isRequestResponse) {
			this.isRequestResponse = isRequestResponse;
		}

		public void setSoapAction(String soapAction) {
			this.soapAction = soapAction;
		}

		public void setAddress(String address) {
			this.address = address;
		}

		public void setWsdlURL(String wsdlURL) {
			this.wsdlURL = wsdlURL;
		}

		public void setEsbFeatures(java.util.Collection<org.apache.cxf.feature.Feature> esbFeatures) {
			this.esbFeatures = esbFeatures;
		}

		public void setBus(org.apache.cxf.Bus bus) {
			this.bus = bus;
		}

		public void setAuthType(String authType) {
			this.authType = authType;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public void setPassword(String password) {
			this.password = password;
		}

		public void setProxyServer(String proxyServer) {
			this.proxyServer = proxyServer;
		}

		public void setProxyPort(int proxyPort) {
			this.proxyPort = proxyPort;
		}

		public void setProxyUsername(String proxyUsername) {
			this.proxyUsername = proxyUsername;
		}

		public void setProxyPassword(String proxyPassword) {
			this.proxyPassword = proxyPassword;
		}

		public void setConnectionTimeout(long connectionTimeout) {
			this.connectionTimeout = connectionTimeout;
		}

		public void setReceiveTimeout(long receiveTimeout) {
			this.receiveTimeout = receiveTimeout;
		}

		public void setAutoRedirect(boolean autoRedirect) {
			this.autoRedirect = autoRedirect;
		}

		public void setDisableChunking(boolean disableChunking) {
			this.disableChunking = disableChunking;
		}

		public void setRedirectSameHostOnly(boolean redirectSameHostOnly) {
			this.redirectSameHostOnly = redirectSameHostOnly;
		}

		public void setLogMessages(boolean logMessages) {
			this.logMessages = logMessages;
		}

		public void setSoapHeaders(java.util.Collection<org.apache.cxf.headers.Header> soapHeaders) {
			this.soapHeaders = soapHeaders;
		}

		public java.util.Map<String, List<?>> getHttpResponseHeaders() {
			return this.httpResponseHeaders;
		}

		public java.lang.Integer getHttpResponseCode() {
			return this.httpResponseCode;
		}

		public void setCorrelationIDCallbackHandler(Object correlationIDCallbackHandler) {
			this.correlationIDCallbackHandler = correlationIDCallbackHandler;
		}

		public void setSamCustomProperties(java.util.Map<String, String> samCustomProperties) {
			this.samCustomProperties = samCustomProperties;
		}

		public String getCorrelationID() {
			return correlationID;
		}

		public org.dom4j.Document invoke(org.dom4j.Document doc)
				throws GenericFaultInfoException, org.apache.cxf.interceptor.Fault {
			org.apache.cxf.frontend.ClientFactoryBean clientFactory = new org.apache.cxf.frontend.ClientFactoryBean();
			clientFactory.setDataBinding(new org.apache.cxf.databinding.source.SourceDataBinding());
			clientFactory.getServiceFactory().getServiceConfigurations().add(0,
					new org.apache.cxf.wsdl.service.factory.AbstractServiceConfiguration() {
						@Override
						public Boolean isOperation(java.lang.reflect.Method method) {
							return "invoke".equals(method.getName());
						}

						@Override
						public javax.xml.namespace.QName getOperationName(
								org.apache.cxf.service.model.InterfaceInfo service, java.lang.reflect.Method method) {
							return operationQName;
						}

						@Override
						public Boolean hasOutMessage(java.lang.reflect.Method m) {
							return isRequestResponse;
						}

						@Override
						public String getAction(org.apache.cxf.service.model.OperationInfo op,
								java.lang.reflect.Method method) {
							return soapAction;
						}

						@Override
						public Boolean isWrapped() {
							return Boolean.FALSE;
						}

						@Override
						public javax.xml.namespace.QName getFaultName(
								org.apache.cxf.service.model.InterfaceInfo service,
								org.apache.cxf.service.model.OperationInfo o, Class<?> exClass, Class<?> beanClass) {
							for (org.apache.cxf.service.model.FaultInfo fi : o.getFaults()) {
								for (org.apache.cxf.service.model.MessagePartInfo mpi : fi.getMessageParts()) {
									return mpi.getConcreteName();
								}
							}
							return null;
						}
					});
			if (null != wsdlURL) {
				clientFactory.setWsdlURL(wsdlURL);
			}
			clientFactory.setServiceClass(GenericServiceClass.class);

			clientFactory.setServiceName(serviceQName);
			clientFactory.setEndpointName(portQName);

			clientFactory.setAddress(address);
			clientFactory.getProperties(true).put("soap.no.validate.parts", Boolean.TRUE);

			if (null != bus) {
				clientFactory.setBus(bus);
			}
			if (null != esbFeatures) {
				clientFactory.getFeatures().addAll(esbFeatures);
			}
			if (logMessages) {
				clientFactory.getFeatures().add(new org.apache.cxf.feature.LoggingFeature());
			}
			if (null != correlationIDCallbackHandler) {
				clientFactory.getProperties(true).put("correlation-id.callback-handler", correlationIDCallbackHandler);
			}
			if (null != samCustomProperties) {
				clientFactory.getProperties(true).put("SAM-PROPS", samCustomProperties);
				clientFactory.getProperties(true).put("esb.sam.properties", samCustomProperties);
			}

			org.apache.cxf.endpoint.Client client = clientFactory.create();

			org.apache.cxf.transport.http.HTTPConduit conduit = (org.apache.cxf.transport.http.HTTPConduit) client
					.getConduit();
			if ("BASIC".equals(authType)) {
				org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy = new org.apache.cxf.configuration.security.AuthorizationPolicy();
				authorizationPolicy.setUserName(username);
				authorizationPolicy.setPassword(password);
				authorizationPolicy.setAuthorizationType("Basic");
				conduit.setAuthorization(authorizationPolicy);
			} else if ("DIGEST".equals(authType)) {
				org.apache.cxf.configuration.security.AuthorizationPolicy authorizationPolicy = new org.apache.cxf.configuration.security.AuthorizationPolicy();
				authorizationPolicy.setUserName(username);
				authorizationPolicy.setPassword(password);
				authorizationPolicy.setAuthorizationType("Digest");
				conduit.setAuthorization(authorizationPolicy);
			} else if ("TOKEN".equals(authType)) {
				java.util.Map<String, Object> wssProps = new java.util.HashMap<String, Object>();
				wssProps.put(org.apache.wss4j.common.ConfigurationConstants.ACTION,
						org.apache.wss4j.common.ConfigurationConstants.USERNAME_TOKEN);
				wssProps.put(org.apache.wss4j.common.ConfigurationConstants.USER, username);
				wssProps.put(org.apache.wss4j.common.ConfigurationConstants.PASSWORD_TYPE,
						org.apache.wss4j.common.WSS4JConstants.PW_TEXT);
				wssProps.put(org.apache.wss4j.common.ConfigurationConstants.PW_CALLBACK_REF,
						new javax.security.auth.callback.CallbackHandler() {
							public void handle(javax.security.auth.callback.Callback[] callbacks)
									throws java.io.IOException,
									javax.security.auth.callback.UnsupportedCallbackException {
								((org.apache.wss4j.common.ext.WSPasswordCallback) callbacks[0]).setPassword(password);
							}
						});
				client.getEndpoint().getOutInterceptors()
						.add(new org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor(wssProps));
				client.getRequestContext().put("ws-security.username", username);
				client.getRequestContext().put("ws-security.password", password);
			}
			org.apache.cxf.transports.http.configuration.HTTPClientPolicy httpClientPolicy = conduit.getClient();
			if (null != proxyServer) {
				httpClientPolicy.setProxyServerType(org.apache.cxf.transports.http.configuration.ProxyServerType.HTTP);
				httpClientPolicy.setProxyServer(proxyServer);
				httpClientPolicy.setProxyServerPort(proxyPort);
			}
			if (null != proxyUsername && !"".equals(proxyUsername)) {
				org.apache.cxf.configuration.security.ProxyAuthorizationPolicy proxyAuthorization = new org.apache.cxf.configuration.security.ProxyAuthorizationPolicy();
				proxyAuthorization.setUserName(proxyUsername);
				proxyAuthorization.setPassword(proxyPassword);
				conduit.setProxyAuthorization(proxyAuthorization);
			}
			httpClientPolicy.setConnectionTimeout(connectionTimeout);
			httpClientPolicy.setReceiveTimeout(receiveTimeout);
			if (autoRedirect) {
				httpClientPolicy.setAutoRedirect(autoRedirect);
				client.getRequestContext().put("http.redirect.relative.uri", true);
				client.getRequestContext().put("http.redirect.same.host.only", redirectSameHostOnly);
			}
			if (disableChunking) {
				httpClientPolicy.setAllowChunking(false);
			}
			if (null != soapHeaders) {
				client.getRequestContext().put(org.apache.cxf.headers.Header.HEADER_LIST, soapHeaders);
			}

			try {
				Object[] results = client.invoke(operationQName,
						new javax.xml.transform.dom.DOMSource(new org.dom4j.io.DOMWriter().write(doc)));
				correlationID = (String) client.getResponseContext().get("CorrelationID");
				httpResponseHeaders = (java.util.Map<String, java.util.List<?>>) client.getResponseContext()
						.get(org.apache.cxf.message.Message.PROTOCOL_HEADERS);
				httpResponseCode = (Integer) client.getResponseContext()
						.get(org.apache.cxf.message.Message.RESPONSE_CODE);
				if (results != null && results.length > 0) {
					return sourceToDocument((javax.xml.transform.Source) results[0]);
				}
			} catch (GenericFaultInfoException e) {
				throw e;
			} catch (org.apache.cxf.interceptor.Fault e) {
				throw e;
			} catch (Exception e) {
				throw new org.apache.cxf.interceptor.Fault(e);
			}
			return null;
		}

		public static org.dom4j.Document sourceToDocument(javax.xml.transform.Source source) throws Exception {
			java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();
			FACTORY.newTransformer().transform(source, new javax.xml.transform.stream.StreamResult(os));
			return new org.dom4j.io.SAXReader().read(new java.io.ByteArrayInputStream(os.toByteArray()));
		}

	}

	public class HttpHeadersFeature extends org.apache.cxf.feature.AbstractFeature {

		public final static String HTTP_HEADERS = "http_headers";
		public final static String HTTP_RESPONSE_CODE = "http_response_code";

		private HttpHeadersOutInterceptor out = new HttpHeadersOutInterceptor();
		private HttpHeadersInInterceptor in = new HttpHeadersInInterceptor();

		public HttpHeadersFeature(List<java.util.Map<String, String>> headers) {
			out.setHeaders(headers);
		}

		public HttpHeadersOutInterceptor getOutInterceptor() {
			return out;
		}

		public HttpHeadersInInterceptor getInInterceptor() {
			return in;
		}

		public java.util.Map<String, List<?>> getResponseHeaders() {
			return getInInterceptor().getHeaders();
		}

		public java.lang.Integer getResponseCode() {
			return getInInterceptor().getResponseCode();
		}

		@Override
		protected void initializeProvider(org.apache.cxf.interceptor.InterceptorProvider provider,
				org.apache.cxf.Bus bus) {
			provider.getOutInterceptors().add(out);
			provider.getInInterceptors().add(in);
		}

		public class HttpHeadersOutInterceptor
				extends org.apache.cxf.phase.AbstractPhaseInterceptor<org.apache.cxf.message.Message> {

			private List<java.util.Map<String, String>> headers = null;

			public HttpHeadersOutInterceptor() {
				super(org.apache.cxf.phase.Phase.POST_PROTOCOL);
			}

			public void setHeaders(List<java.util.Map<String, String>> headers) {
				this.headers = headers;
			}

			@Override
			public void handleMessage(org.apache.cxf.message.Message message) throws org.apache.cxf.interceptor.Fault {
				java.util.Map<String, List> httpHeaders = (java.util.Map<String, List>) message
						.get(org.apache.cxf.message.Message.PROTOCOL_HEADERS);

				message.put(org.apache.cxf.transport.http.Headers.ADD_HEADERS_PROPERTY, true);
				try {
					for (java.util.Map<String, String> header : headers) {
						for (java.util.Map.Entry<String, String> h : header.entrySet()) {
							String k = h.getKey();
							if (k == null || k == "")
								continue;
							List<String> v = httpHeaders.get(k);
							if (v == null) {
								v = new java.util.ArrayList<String>();
								httpHeaders.put(k, v);
							}
							v.add(h.getValue());
						}
					}
				} catch (Exception ce) {
					throw new org.apache.cxf.interceptor.Fault(ce);
				}
			}
		}

		public class HttpHeadersInInterceptor
				extends org.apache.cxf.phase.AbstractPhaseInterceptor<org.apache.cxf.message.Message> {

			private java.util.Map<String, List<?>> httpHeaders = new java.util.TreeMap<String, List<?>>(
					String.CASE_INSENSITIVE_ORDER);
			private java.lang.Integer responseCode = new java.lang.Integer(0);

			public HttpHeadersInInterceptor() {
				super(org.apache.cxf.phase.Phase.POST_PROTOCOL);
			}

			@SuppressWarnings("unchecked")
			@Override
			public void handleMessage(org.apache.cxf.message.Message message) throws org.apache.cxf.interceptor.Fault {

				try {
					this.httpHeaders = ((java.util.Map<String, List<?>>) message
							.get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
					this.responseCode = (java.lang.Integer) message.get(org.apache.cxf.message.Message.RESPONSE_CODE);
				} catch (Exception ce) {
					throw new org.apache.cxf.interceptor.Fault(ce);
				}
			}

			@SuppressWarnings("unchecked")
			@Override
			public void handleFault(org.apache.cxf.message.Message message) throws org.apache.cxf.interceptor.Fault {

				try {
					this.httpHeaders = ((java.util.Map<String, List<?>>) message
							.get(org.apache.cxf.message.Message.PROTOCOL_HEADERS));
					this.responseCode = (java.lang.Integer) message.get(org.apache.cxf.message.Message.RESPONSE_CODE);
				} catch (Exception ce) {
					throw new org.apache.cxf.interceptor.Fault(ce);
				}
			}

			public java.util.Map<String, List<?>> getHeaders() {
				return httpHeaders;
			}

			public java.lang.Integer getResponseCode() {
				return responseCode;
			}
		}
	}

	private static java.util.Map<String, Object> collectFaultInfo(Exception error) {
		String faultString = null;
		String faultActor = null;
		String faultCode = null;
		String faultRole = null;
		String faultNode = null;
		org.dom4j.Document faultDetail = null;
		org.w3c.dom.Element faultDomDetail = null;

		if (error instanceof org.apache.cxf.binding.soap.SoapFault) {
			org.apache.cxf.binding.soap.SoapFault cxfSoapFault = (org.apache.cxf.binding.soap.SoapFault) error;

			faultString = cxfSoapFault.getReason();
			faultCode = cxfSoapFault.getFaultCode().toString();
			faultRole = cxfSoapFault.getRole();
			faultNode = cxfSoapFault.getNode();
			faultDomDetail = cxfSoapFault.getDetail();
		} else if (error instanceof GenericFaultInfoException) {
			GenericFaultInfoException genericFault = (GenericFaultInfoException) error;

			faultString = genericFault.getMessage();
			faultDetail = genericFault.getFaultInfo();
		} else if (error instanceof javax.xml.ws.soap.SOAPFaultException) {
			javax.xml.soap.SOAPFault wsSoapFault = ((javax.xml.ws.soap.SOAPFaultException) error).getFault();

			faultString = wsSoapFault.getFaultString();
			faultActor = wsSoapFault.getFaultActor();
			faultCode = wsSoapFault.getFaultCodeAsQName().toString();

			if (javax.xml.soap.SOAPConstants.URI_NS_SOAP_1_2_ENVELOPE.equals(wsSoapFault.getNamespaceURI())) {
				// SOAP 1.2
				try {
					faultRole = wsSoapFault.getFaultRole();
					faultNode = wsSoapFault.getFaultNode();
				} catch (java.lang.UnsupportedOperationException uoe) {
				}
			}

			faultDomDetail = wsSoapFault.getDetail();
		} else {
			return null;
		}

		java.util.Map<String, Object> faultInfo = new java.util.HashMap<String, Object>();
		faultInfo.put("faultString", faultString);
		faultInfo.put("faultActor", faultActor);
		faultInfo.put("faultCode", faultCode);
		faultInfo.put("faultRole", faultRole);
		faultInfo.put("faultNode", faultNode);
		if (null != faultDomDetail) {
			org.w3c.dom.NodeList nl = faultDomDetail.getElementsByTagName("*");
			if (nl.getLength() > 0) {
				try {
					javax.xml.transform.Source faultSource = new javax.xml.transform.dom.DOMSource(nl.item(0));
					faultDetail = GenericConsumer.sourceToDocument(faultSource);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		faultInfo.put("faultDetail", faultDetail);
		return faultInfo;
	}

	private void printFaultInfo(java.util.Map<String, Object> faultInfo) {
		java.lang.StringBuffer sb = new java.lang.StringBuffer("Fault {");
		sb.append("string: ").append(faultInfo.get("faultString"));
		if (null != faultInfo.get("faultCode")) {
			sb.append("; code:").append(faultInfo.get("faultCode"));
		}
		if (null != faultInfo.get("faultActor")) {
			sb.append("; actor:").append(faultInfo.get("faultActor"));
		}
		if (null != faultInfo.get("faultRole")) {
			sb.append("; role:").append(faultInfo.get("faultRole"));
		}
		if (null != faultInfo.get("faultNode")) {
			sb.append("; node:").append(faultInfo.get("faultNode"));
		}
		if (null != faultInfo.get("faultDetail")) {
			sb.append("; detail:").append(((org.dom4j.Document) faultInfo.get("faultDetail")).asXML());
		}
		sb.append("}");
		System.out.println(sb.toString());
	}

	private Object wrapPayload(Object payload) {
		java.util.Map<String, Object> outputWrapped = new java.util.HashMap<String, Object>();
		outputWrapped.put("PAYLOAD", payload);
		return outputWrapped;
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];

		public routines.system.Document payload;

		public routines.system.Document getPayload() {
			return this.payload;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer) {

				try {

					int length = 0;

					this.payload = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.payload);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("payload=" + String.valueOf(payload));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];

		public String faultCode;

		public String getFaultCode() {
			return this.faultCode;
		}

		public String faultString;

		public String getFaultString() {
			return this.faultString;
		}

		public String faultActor;

		public String getFaultActor() {
			return this.faultActor;
		}

		public String faultNode;

		public String getFaultNode() {
			return this.faultNode;
		}

		public String faultRole;

		public String getFaultRole() {
			return this.faultRole;
		}

		public routines.system.Document faultDetail;

		public routines.system.Document getFaultDetail() {
			return this.faultDetail;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer.length == 0) {
						commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer) {

				try {

					int length = 0;

					this.faultCode = readString(dis);

					this.faultString = readString(dis);

					this.faultActor = readString(dis);

					this.faultNode = readString(dis);

					this.faultRole = readString(dis);

					this.faultDetail = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.faultCode, dos);

				// String

				writeString(this.faultString, dos);

				// String

				writeString(this.faultActor, dos);

				// String

				writeString(this.faultNode, dos);

				// String

				writeString(this.faultRole, dos);

				// Document

				dos.writeObject(this.faultDetail);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("faultCode=" + faultCode);
			sb.append(",faultString=" + faultString);
			sb.append(",faultActor=" + faultActor);
			sb.append(",faultNode=" + faultNode);
			sb.append(",faultRole=" + faultRole);
			sb.append(",faultDetail=" + String.valueOf(faultDetail));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];

		public routines.system.Document payload;

		public routines.system.Document getPayload() {
			return this.payload;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer) {

				try {

					int length = 0;

					this.payload = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.payload);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("payload=" + String.valueOf(payload));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[0];

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer.length == 0) {
						commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_HelloWorldServiceConsumer, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_HelloWorldServiceConsumer) {

				try {

					int length = 0;

					this.Nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom=" + Nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outStruct out = new outStruct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tESBConsumer_1 begin ] start
				 */

				ok_Hash.put("tESBConsumer_1", false);
				start_Hash.put("tESBConsumer_1", System.currentTimeMillis());

				currentComponent = "tESBConsumer_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("out" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tESBConsumer_1 = 0;

				/**
				 * [tESBConsumer_1 begin ] stop
				 */

				/**
				 * [tXMLMap_1 begin ] start
				 */

				ok_Hash.put("tXMLMap_1", false);
				start_Hash.put("tXMLMap_1", System.currentTimeMillis());

				currentComponent = "tXMLMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tXMLMap_1 = 0;

//===============================input xml init part===============================
				class XML_API_tXMLMap_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_1__Struct {
				}
				Var__tXMLMap_1__Struct Var__tXMLMap_1 = new Var__tXMLMap_1__Struct();
// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
				outStruct out_save = null;
// ###############################
				int nb_line_tXMLMap_1 = 0;

				XML_API_tXMLMap_1 xml_api_tXMLMap_1 = new XML_API_tXMLMap_1();

				class GenerateDocument_out {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_out() {
//    	this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a document in the main
					// input table.
					void generateElements(boolean isInnerJoin, row1Struct row1, Var__tXMLMap_1__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI = treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = doc.addElement("tns:HelloWorldServiceOperationRequest");
							subTreeRootParent = root;
							root.addNamespace("tns",
									TalendString.replaceSpecialCharForXML("http://www.talend.org/service/"));
							routines.system.DocumentHelper.applyNamespace2(root, "HelloWorldServiceOperationRequest",
									"tns", "http://www.talend.org/service/");
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
						org.dom4j.Element loop = null;
						loop = org.dom4j.DocumentHelper.createElement("in");
						subTreeRootParent.elements().add(orderHelper.getInsertLocation(0, 0), loop);
						subTreeRootParent = loop;
						org.dom4j.Element loop_1 = null;
						loop_1 = loop.addElement("Nom");
						valueMap.put("loop_1", row1.Nom);
						if (valueMap.get("loop_1") != null) {
							routines.system.NestXMLTool.setText(loop_1,
									FormatterUtils.fm(valueMap.get("loop_1"), null));
						}
					}
				}

				/**
				 * [tXMLMap_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row1Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row1Struct>();
				row1 = new row1Struct();
				row1.Nom = "Alice";
				cacheList_tFixedFlowInput_1.add(row1);
				row1 = new row1Struct();
				row1.Nom = "Bob";
				cacheList_tFixedFlowInput_1.add(row1);
				row1 = new row1Struct();
				row1.Nom = "Chuck";
				cacheList_tFixedFlowInput_1.add(row1);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row1Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row1 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_begin ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_begin ] stop
						 */

						/**
						 * [tXMLMap_1 main ] start
						 */

						currentComponent = "tXMLMap_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

						boolean rejectedInnerJoin_tXMLMap_1 = false;
						boolean rejectedDocInnerJoin_tXMLMap_1 = false;
						boolean mainRowRejected_tXMLMap_1 = false;
						boolean isMatchDocRowtXMLMap_1 = false;

						GenerateDocument_out gen_Doc_out_tXMLMap_1 = new GenerateDocument_out();
						out_tmp.payload = null;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_1__Struct Var = Var__tXMLMap_1;
							// ###############################
							// # Output tables

							out = null;

// # Output table : 'out'

							gen_Doc_out_tXMLMap_1.generateElements(rejectedDocInnerJoin_tXMLMap_1, row1, Var);

							if (out_tmp.payload == null) {
								out_tmp.payload = new routines.system.Document();
								out_tmp.payload.setDocument(gen_Doc_out_tXMLMap_1.getDocument());
							}

							out = out_tmp;
							out_save = out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_1 = false;

						tos_count_tXMLMap_1++;

						/**
						 * [tXMLMap_1 main ] stop
						 */

						/**
						 * [tXMLMap_1 process_data_begin ] start
						 */

						currentComponent = "tXMLMap_1";

						/**
						 * [tXMLMap_1 process_data_begin ] stop
						 */
// Start of branch "out"
						if (out != null) {

							/**
							 * [tESBConsumer_1 main ] start
							 */

							currentComponent = "tESBConsumer_1";

							// out
							// out

							if (execStat) {
								runStat.updateStatOnConnection("out" + iterateId, 1, 1);
							}

							row3 = null;
							row2 = null;
							final javax.xml.namespace.QName serviceName_tESBConsumer_1 = new javax.xml.namespace.QName(
									"http://www.talend.org/service/", "HelloWorldService");
							final javax.xml.namespace.QName portName_tESBConsumer_1 = new javax.xml.namespace.QName(
									"http://www.talend.org/service/", "HelloWorldServicePort");

							final List<java.util.Map<String, String>> customHttpHeaders_tESBConsumer_1 = new java.util.ArrayList<java.util.Map<String, String>>();
							final HttpHeadersFeature httpHeadersFeature = new HttpHeadersFeature(
									customHttpHeaders_tESBConsumer_1);

							try {
								routines.system.Document requestTalendDoc_tESBConsumer_1 = out.payload;
								try {
									org.dom4j.Document responseDoc_tESBConsumer_1 = null;

									final java.util.Map<String, String> customProps_tESBConsumer_1 = new java.util.HashMap<String, String>();

									final List<org.apache.cxf.headers.Header> soapHeaders_tESBConsumer_1 = new java.util.ArrayList<org.apache.cxf.headers.Header>();

									if (null == registry) {
										GenericConsumer genericConsumer_tESBConsumer_1 = new GenericConsumer();
										genericConsumer_tESBConsumer_1.setServiceQName(serviceName_tESBConsumer_1);
										genericConsumer_tESBConsumer_1.setPortQName(portName_tESBConsumer_1);
										genericConsumer_tESBConsumer_1.setOperationQName(new javax.xml.namespace.QName(
												"http://www.talend.org/service/", "HelloWorldServiceOperation"));
										genericConsumer_tESBConsumer_1.setIsRequestResponse(true);
										genericConsumer_tESBConsumer_1.setSoapAction(
												"http://www.talend.org/service/HelloWorldServiceOperation");

										genericConsumer_tESBConsumer_1
												.setAddress("http://localhost:8090/services/HelloWorldService");
										if (null != getClass().getResourceAsStream("wsdl/tESBConsumer_1.wsdl")) {
											genericConsumer_tESBConsumer_1.setWsdlURL("classpath:/"
													+ this.getClass().getPackage().getName().replace(".", "/")
													+ "/wsdl/tESBConsumer_1.wsdl");
										}

										java.util.Collection<org.apache.cxf.feature.Feature> esbFeatures_tESBConsumer_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

										genericConsumer_tESBConsumer_1.setEsbFeatures(esbFeatures_tESBConsumer_1);

										boolean use_auth_tESBConsumer_1 = false;
										if (use_auth_tESBConsumer_1) {
											genericConsumer_tESBConsumer_1.setAuthType((String) "SAML");
											genericConsumer_tESBConsumer_1.setUsername("username");
											final String decryptedPassword_tESBConsumer_1 = routines.system.PasswordEncryptUtil
													.decryptPassword("ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");
											genericConsumer_tESBConsumer_1
													.setPassword(decryptedPassword_tESBConsumer_1);
										}

										boolean use_proxy_tESBConsumer_1 = false;
										if (use_proxy_tESBConsumer_1) {
											genericConsumer_tESBConsumer_1.setProxyServer("61.163.92.4");
											genericConsumer_tESBConsumer_1.setProxyPort(8080);
											genericConsumer_tESBConsumer_1.setProxyUsername("");
											final String decryptedPassword_tESBConsumer_1 = routines.system.PasswordEncryptUtil
													.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
											genericConsumer_tESBConsumer_1
													.setProxyPassword(decryptedPassword_tESBConsumer_1);
										}

										genericConsumer_tESBConsumer_1.setConnectionTimeout((long) (30 * 1000L));
										genericConsumer_tESBConsumer_1.setReceiveTimeout((long) (60 * 1000L));
										genericConsumer_tESBConsumer_1.setAutoRedirect(false);
										genericConsumer_tESBConsumer_1.setRedirectSameHostOnly(true);

										genericConsumer_tESBConsumer_1.setDisableChunking(false);

										genericConsumer_tESBConsumer_1.setLogMessages(false);

										if (!soapHeaders_tESBConsumer_1.isEmpty()) {
											genericConsumer_tESBConsumer_1.setSoapHeaders(soapHeaders_tESBConsumer_1);
										}
										esbFeatures_tESBConsumer_1.add(httpHeadersFeature);
										responseDoc_tESBConsumer_1 = genericConsumer_tESBConsumer_1
												.invoke(requestTalendDoc_tESBConsumer_1.getDocument());
										globalMap.put("tESBConsumer_1_HTTP_HEADERS",
												httpHeadersFeature.getResponseHeaders());
										globalMap.put("tESBConsumer_1_HTTP_RESPONSE_CODE",
												httpHeadersFeature.getResponseCode());
									} else {
										ESBConsumer consumer_tESBConsumer_1 = registry
												.createConsumer(new ESBEndpointInfo() {

													@SuppressWarnings("serial")
													private java.util.Map<String, Object> props = new java.util.HashMap<String, Object>() {
														{
															put("dataFormat", "PAYLOAD");
															put("portName", portName_tESBConsumer_1.toString());
															put("serviceName", serviceName_tESBConsumer_1.toString());
															put("defaultOperationName", "HelloWorldServiceOperation");
															put("operationNamespace", "http://www.talend.org/service/");
															put("soapAction",
																	"http://www.talend.org/service/HelloWorldServiceOperation");
															if (null != getClass()
																	.getResourceAsStream("wsdl/tESBConsumer_1.wsdl")) {
																put("wsdlURL",
																		"classpath:/"
																				+ this.getClass().getPackage().getName()
																						.replace(".", "/")
																				+ "/wsdl/tESBConsumer_1.wsdl");
															}
															put("publishedEndpointUrl",
																	"http://localhost:8090/services/HelloWorldService");
															put("COMMUNICATION_STYLE", "request-response");

															put("logMessages", false);

															// use Service Locator
															put("useServiceLocator", false);

															// use Service Activity Monitor
															put("useServiceActivityMonitor", false);

															// use Service Registry
															put("useServiceRegistry", false);

															boolean use_auth_tESBConsumer_1 = false;
															if (use_auth_tESBConsumer_1 || false) {
																final String decryptedPassword_tESBConsumer_1 = routines.system.PasswordEncryptUtil
																		.decryptPassword(
																				"ENC:[2B0+1MHn/QDgJqfaQXpQtQ==]");
																if (false) {
																	put("username", "username");
																	put("password", decryptedPassword_tESBConsumer_1);
																} else if (use_auth_tESBConsumer_1) {
																	if ("SAML".equals("SAML")) {
																	}
																	put("esbSecurity", "SAML");
																	put("username", "username");
																	put("password", decryptedPassword_tESBConsumer_1);
																}
															}
															if (!soapHeaders_tESBConsumer_1.isEmpty()) {
																put("soapHeaders", soapHeaders_tESBConsumer_1);
															}
															put("httpHeadersFeature", httpHeadersFeature);

														}
													};

													public String getEndpointUri() {
														// projectName + "_" + processName + "_" + componentName
														return "LOCAL_PROJECT_HelloWorldServiceConsumer_tESBConsumer_1";
													}

													public java.util.Map<String, Object> getEndpointProperties() {
														return props;
													}

													public String getEndpointKey() {
														return "cxf";
													}
												});

										Object request_tESBConsumer_1 = wrapPayload(
												requestTalendDoc_tESBConsumer_1.getDocument());
										Object consumerResponse_tESBConsumer_1 = consumer_tESBConsumer_1
												.invoke(request_tESBConsumer_1);
										if (null == consumerResponse_tESBConsumer_1) {
											// one way call
										} else {
											if (consumerResponse_tESBConsumer_1 instanceof java.util.Map) {
												java.util.Map<?, ?> responseMap_tESBConsumer_1 = (java.util.Map<?, ?>) consumerResponse_tESBConsumer_1;
												responseDoc_tESBConsumer_1 = (org.dom4j.Document) responseMap_tESBConsumer_1
														.get("payload");
											} else if (consumerResponse_tESBConsumer_1 instanceof org.dom4j.Document) {
												responseDoc_tESBConsumer_1 = (org.dom4j.Document) consumerResponse_tESBConsumer_1;
											} else {
												throw new RuntimeException("Incompatible consumer response: "
														+ consumerResponse_tESBConsumer_1.getClass().getName());
											}

											globalMap.put("tESBConsumer_1_HTTP_HEADERS",
													httpHeadersFeature.getResponseHeaders());
											globalMap.put("tESBConsumer_1_HTTP_RESPONSE_CODE",
													httpHeadersFeature.getResponseCode());
										}
									}
									if (row2 == null) {
										row2 = new row2Struct();
									}
									routines.system.Document responseTalendDoc_tESBConsumer_1 = null;
									if (null != responseDoc_tESBConsumer_1) {
										responseTalendDoc_tESBConsumer_1 = new routines.system.Document();
										responseTalendDoc_tESBConsumer_1.setDocument(responseDoc_tESBConsumer_1);
									}
									row2.payload = responseTalendDoc_tESBConsumer_1;
								} catch (Exception e_tESBConsumer_1) {
									java.util.Map<String, Object> faultInfo_tESBConsumer_1 = collectFaultInfo(
											e_tESBConsumer_1);
									if (null == faultInfo_tESBConsumer_1) {
										throw e_tESBConsumer_1; // non fault exception
									}
									if (row3 == null) {
										row3 = new row3Struct();
									}

									row3.faultCode = (String) faultInfo_tESBConsumer_1.get("faultCode");
									row3.faultString = (String) faultInfo_tESBConsumer_1.get("faultString");
									row3.faultActor = (String) faultInfo_tESBConsumer_1.get("faultActor");
									row3.faultNode = (String) faultInfo_tESBConsumer_1.get("faultNode");
									row3.faultRole = (String) faultInfo_tESBConsumer_1.get("faultRole");

									if (null != faultInfo_tESBConsumer_1.get("faultDetail")) {
										row3.faultDetail = new routines.system.Document();
										row3.faultDetail.setDocument(
												(org.dom4j.Document) faultInfo_tESBConsumer_1.get("faultDetail"));
									}

								}
							} catch (Exception e_tESBConsumer_1) {
								throw (e_tESBConsumer_1);
							}

							if (httpHeadersFeature != null) {
								globalMap.put("tESBConsumer_1_HTTP_HEADERS", httpHeadersFeature.getResponseHeaders());
								globalMap.put("tESBConsumer_1_HTTP_RESPONSE_CODE",
										httpHeadersFeature.getResponseCode());
							}

							tos_count_tESBConsumer_1++;

							/**
							 * [tESBConsumer_1 main ] stop
							 */

							/**
							 * [tESBConsumer_1 process_data_begin ] start
							 */

							currentComponent = "tESBConsumer_1";

							/**
							 * [tESBConsumer_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
								}

///////////////////////		

								strBuffer_tLogRow_1 = new StringBuilder();

								if (row2.payload != null) { //

									strBuffer_tLogRow_1.append(String.valueOf(row2.payload));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_1 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
								}
								consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
								consoleOut_tLogRow_1.flush();
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row2"

// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_2 main ] start
								 */

								currentComponent = "tLogRow_2";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
								}

///////////////////////		

								strBuffer_tLogRow_2 = new StringBuilder();

								if (row3.faultCode != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultCode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.faultString != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultString));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.faultActor != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultActor));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.faultNode != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultNode));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.faultRole != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultRole));

								} //

								strBuffer_tLogRow_2.append("|");

								if (row3.faultDetail != null) { //

									strBuffer_tLogRow_2.append(String.valueOf(row3.faultDetail));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_2 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
								}
								consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
								consoleOut_tLogRow_2.flush();
								nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_2++;

								/**
								 * [tLogRow_2 main ] stop
								 */

								/**
								 * [tLogRow_2 process_data_begin ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_2 process_data_end ] start
								 */

								currentComponent = "tLogRow_2";

								/**
								 * [tLogRow_2 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tESBConsumer_1 process_data_end ] start
							 */

							currentComponent = "tESBConsumer_1";

							/**
							 * [tESBConsumer_1 process_data_end ] stop
							 */

						} // End of branch "out"

						/**
						 * [tXMLMap_1 process_data_end ] start
						 */

						currentComponent = "tXMLMap_1";

						/**
						 * [tXMLMap_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE", nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tXMLMap_1 end ] start
				 */

				currentComponent = "tXMLMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tXMLMap_1", true);
				end_Hash.put("tXMLMap_1", System.currentTimeMillis());

				/**
				 * [tXMLMap_1 end ] stop
				 */

				/**
				 * [tESBConsumer_1 end ] start
				 */

				currentComponent = "tESBConsumer_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tESBConsumer_1", true);
				end_Hash.put("tESBConsumer_1", System.currentTimeMillis());

				/**
				 * [tESBConsumer_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tXMLMap_1 finally ] start
				 */

				currentComponent = "tXMLMap_1";

				/**
				 * [tXMLMap_1 finally ] stop
				 */

				/**
				 * [tESBConsumer_1 finally ] start
				 */

				currentComponent = "tESBConsumer_1";

				/**
				 * [tESBConsumer_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final HelloWorldServiceConsumer HelloWorldServiceConsumerClass = new HelloWorldServiceConsumer();

		int exitCode = HelloWorldServiceConsumerClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = HelloWorldServiceConsumer.class.getClassLoader().getResourceAsStream(
					"local_project/helloworldserviceconsumer_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = HelloWorldServiceConsumer.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFixedFlowInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFixedFlowInput_1) {
			globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

			e_tFixedFlowInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : HelloWorldServiceConsumer");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 88462 characters generated by Talend Open Studio for ESB on the October 1,
 * 2019 at 5:40:44 PM CET
 ************************************************************************************************/